Compatible and target 55
next file is Haps/PermissionsDispatcher/classes.dex
Soot started on Thu Dec 09 16:58:54 CST 2021
Using 'ohos-framework/ohos-5/framework.jar' as android.jar
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: javax.lang.model.type.TypeMirror is a phantom class!
Warning: javax.lang.model.element.TypeElement is a phantom class!
Warning: javax.lang.model.element.ExecutableElement is a phantom class!
Warning: javax.lang.model.type.ArrayType is a phantom class!
Warning: javax.lang.model.element.AnnotationMirror is a phantom class!
Warning: javax.lang.model.util.SimpleElementVisitor8 is a phantom class!
Warning: javax.lang.model.element.Element is a phantom class!
Warning: javax.lang.model.element.PackageElement is a phantom class!
Warning: javax.lang.model.element.TypeParameterElement is a phantom class!
Warning: javax.lang.model.type.TypeVariable is a phantom class!
Warning: javax.lang.model.element.Modifier is a phantom class!
Warning: javax.lang.model.type.DeclaredType is a phantom class!
Warning: javax.lang.model.util.Types is a phantom class!
Warning: javax.lang.model.element.VariableElement is a phantom class!
Warning: javax.annotation.processing.AbstractProcessor is a phantom class!
Warning: javax.lang.model.util.Elements is a phantom class!
Warning: javax.annotation.processing.Filer is a phantom class!
Warning: javax.lang.model.SourceVersion is a phantom class!
Warning: javax.annotation.processing.ProcessingEnvironment is a phantom class!
Warning: javax.annotation.processing.RoundEnvironment is a phantom class!
Warning: javax.tools.JavaFileObject is a phantom class!
Warning: javax.lang.model.util.SimpleAnnotationValueVisitor8 is a phantom class!
Warning: javax.tools.SimpleJavaFileObject is a phantom class!
Warning: javax.tools.JavaFileObject$Kind is a phantom class!
Warning: javax.lang.model.util.SimpleTypeVisitor8 is a phantom class!
Warning: javax.lang.model.type.ErrorType is a phantom class!
Warning: javax.lang.model.type.NoType is a phantom class!
Warning: javax.lang.model.type.PrimitiveType is a phantom class!
Warning: javax.lang.model.type.WildcardType is a phantom class!
Warning: javax.lang.model.element.AnnotationValue is a phantom class!
Warning: javax.lang.model.element.AnnotationValueVisitor is a phantom class!
Warning: javax.lang.model.element.ElementKind is a phantom class!
Warning: javax.lang.model.element.ElementVisitor is a phantom class!
Warning: javax.lang.model.element.Name is a phantom class!
Warning: javax.lang.model.type.ExecutableType is a phantom class!
Warning: javax.lang.model.type.TypeKind is a phantom class!
Warning: javax.lang.model.type.TypeVisitor is a phantom class!
Warning: javax.lang.model.util.ElementFilter is a phantom class!
Transforming com.squareup.javapoet.AnnotationSpec$Visitor... 
Transforming com.squareup.javapoet.NameAllocator... 
Transforming com.permissions.dispatcher.annotation.OnShowRationale... 
Transforming com.permissions.dispatcher.sample.TestPermissionAbilityPermissionsDispatcher... 
Transforming com.permissions.dispatcher.processor.exception.PrivateMethodException... 
Transforming com.permissions.dispatcher.annotation.GrantableRequest... 
Transforming ohos.data.orm.annotation.PrimaryKey... 
Transforming com.permissions.dispatcher.processor.exception.NoThrowsAllowedException... 
Transforming com.permissions.dispatcher.processor.impl.AbilitySliceProcessorUnit... 
Transforming com.permissions.dispatcher.processor.util.Validators... 
Transforming com.squareup.javapoet.TypeSpec$Builder... 
Transforming com.permissions.dispatcher.sample.slice.MainAbilitySlice$1... 
Transforming com.permissions.dispatcher.processor.exception.DuplicatedValueException... 
Transforming com.permissions.dispatcher.sample.MainAbilityPermissionsDispatcher$1... 
Transforming com.permissions.dispatcher.sample.slice.MainAbilitySlice$2... 
Transforming com.permissions.dispatcher.sample.MainAbilityPermissionsDispatcher$MainAbilitytoOpenPermissionPermissionRequest... 
Transforming com.permissions.dispatcher.sample.slice.TestPermissionAbilitySlicePermissionsDispatcher... 
Transforming com.permissions.dispatcher.sample.PermissionsDisPatcher... 
Transforming com.squareup.javapoet.-$$Lambda$CodeBlock$4OiVWL2H4Cp8bJ8bFtXxJ2xGSoo... 
Transforming com.permissions.dispatcher.sample.TestPermissionAbility$1... 
Transforming com.permissions.dispatcher.sample.TestPermissionAbility$2... 
Transforming com.permissions.dispatcher.BuildConfig... 
Transforming com.squareup.javapoet.TypeName... 
Transforming com.permissions.dispatcher.processor.impl.SystemAlertWindowHelper... 
Transforming com.squareup.javapoet.AnnotationSpec$1... 
Transforming com.squareup.javapoet.ClassName$1... 
Transforming com.permissions.dispatcher.sample.TestPermissionAbilityPermissionsDispatcher$TestPermissionAbilitytoOpenPermissionPermissionRequest... 
Transforming com.permissions.dispatcher.annotation.NeedsPermission... 
Transforming com.squareup.javapoet.AnnotationSpec$Builder... 
Transforming com.permissions.dispatcher.processor.RuntimePermissionsElement... 
Transforming com.permissions.dispatcher.sample.MainAbility$3... 
Transforming com.squareup.javapoet.LineWrapper$RecordingAppendable... 
Transforming Transforming com.squareup.javapoet.LineWrapper$1... 
Transforming com.squareup.javapoet.TypeSpec$1... 
Transforming com.permissions.dispatcher.processor.util.-$$Lambda$y1N6mLb2m-C38d1sE2GAQiL4WyY... 
Transforming com.permissions.dispatcher.sample.MainAbilityPermissionsDispatcher... 
Transforming Transforming com.permissions.dispatcher.sample.MainAbility$1... 
com.permissions.dispatcher.annotation.OnPermissionDenied... 
Transforming com.permissions.dispatcher.sample.MainAbility$2... 
Transforming com.permissions.dispatcher.processor.exception.NoParametersAllowedException... 
Transforming com.squareup.javapoet.Util... 
Transforming com.permissions.dispatcher.processor.exception.NoAnnotatedMethodsException... 
Transforming com.permissions.dispatcher.annotation.OnNeverAskAgain... 
Transforming com.permissions.dispatcher.processor.util.Extensions... 
Transforming com.squareup.javapoet.-$$Lambda$AnnotationSpec$Builder$-f-pUV2Dc756TeChhTDY1DarzR0... 
Transforming com.permissions.dispatcher.processor.exception.DuplicatedMethodNameException... 
Transforming com.permissions.dispatcher.sample.slice.MainAbilitySlicePermissionsDispatcher$1... 
Transforming com.squareup.javapoet.CodeBlock... 
Transforming com.squareup.javapoet.LineWrapper... 
Transforming Transforming com.squareup.javapoet.ParameterSpec$Builder... 
ohos.data.orm.annotation.Database... 
com.squareup.javapoet.JavaFile$Builder... 
Transforming com.permissions.dispatcher.processor.exception.WrongReturnTypeException... 
Transforming com.squareup.javapoet.MethodSpec$1... 
Transforming com.squareup.javapoet.MethodSpec... 
Transforming com.squareup.javapoet.ParameterizedTypeName... 
Transforming com.squareup.javapoet.TypeSpec... 
Transforming com.permissions.dispatcher.processor.JavaProcessorUnit... 
Transforming com.permissions.dispatcher.sample.ResourceTable... 
Transforming com.permissions.dispatcher.processor.ProcessorUnit... 
Transforming com.permissions.dispatcher.sample.TestPermissionAbility... 
Transforming com.permissions.dispatcher.sample.BuildConfig... 
Transforming com.squareup.javapoet.AnnotationSpec... 
Transforming com.squareup.javapoet.FieldSpec$1... 
Transforming com.permissions.dispatcher.sample.slice.MainAbilitySlicePermissionsDispatcher$MainAbilitySlicehandlePermissionNewPermissionRequest... 
Transforming com.permissions.dispatcher.annotation.RuntimePermissions... 
Transforming com.squareup.javapoet.ArrayTypeName... 
Transforming com.squareup.javapoet.ParameterSpec$1... 
Transforming com.squareup.javapoet.-$$Lambda$CodeBlock$yrx4IxlWAt3ulmUIi9muAR-X7hU... 
Transforming com.squareup.javapoet.ClassName... 
Transforming com.permissions.dispatcher.processor.RequestCodeProvider... 
Transforming com.squareup.javapoet.-$$Lambda$5PjCM7eyD3wzKvobeq60HES21jc... 
Transforming com.squareup.javapoet.-$$Lambda$Yfwu0Pitx-XFlUNATTDq4fAuceM... 
Transforming com.permissions.dispatcher.processor.util.Constants... 
Transforming com.permissions.dispatcher.processor.impl.SensitivePermissionInterface... 
Transforming com.permissions.dispatcher.processor.impl.WriteSettingsHelper... 
Transforming com.squareup.javapoet.-$$Lambda$CodeBlock$P01QW5OmsvEs0vM1DXTujNlxndo... 
Transforming com.squareup.javapoet.-$$Lambda$E-gEikyzMjxB_pc_89Vg4PhZvxE... 
Transforming ohos.data.orm.annotation.Entity... 
Transforming com.squareup.javapoet.ParameterSpec... 
Transforming com.squareup.javapoet.TypeName$2... 
Transforming com.squareup.javapoet.FieldSpec$Builder... 
Transforming com.permissions.dispatcher.sample.MainAbility... 
Transforming com.squareup.javapoet.CodeWriter$Multiset... 
Transforming com.squareup.javapoet.TypeName$1... 
Transforming com.squareup.javapoet.TypeSpec$Kind... 
Transforming com.squareup.javapoet.CodeBlock$Builder... 
Transforming com.squareup.javapoet.JavaFile... 
Transforming com.squareup.javapoet.-$$Lambda$CodeWriter$gWdYplTpdUOwUYDENYoXH38lKsA... 
Transforming com.squareup.javapoet.CodeBlock$CodeBlockJoiner... 
Transforming ohos.data.orm.annotation.Column... 
Transforming com.permissions.dispatcher.sample.slice.TestPermissionAbilitySlicePermissionsDispatcher$1... 
Transforming com.permissions.dispatcher.processor.util.Helpers... 
Transforming com.permissions.dispatcher.processor.exception.SpecialPermissionsWithNeverAskAgainException... 
Transforming com.permissions.dispatcher.sample.TestPermissionAbilityPermissionsDispatcher$1... 
Transforming com.squareup.javapoet.FieldSpec... 
Transforming com.permissions.dispatcher.PermissionUtils... 
Transforming com.squareup.javapoet.LineWrapper$FlushType... 
Transforming com.squareup.javapoet.WildcardTypeName... 
Transforming com.squareup.javapoet.MethodSpec$Builder... 
Transforming com.permissions.dispatcher.processor.impl.AbilityProcessorUnit... 
Transforming com.squareup.javapoet.CodeBlock$1... 
Transforming com.permissions.dispatcher.processor.exception.WrongClassException... 
Transforming com.squareup.javapoet.CodeWriter... 
Transforming ohos.data.orm.annotation.ForeignKey... 
Transforming com.permissions.dispatcher.processor.PermissionsProcessor... 
Transforming com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit... 
Transforming com.permissions.dispatcher.sample.slice.MainAbilitySlice... 
Transforming com.squareup.javapoet.TypeVariableName... 
Transforming com.squareup.javapoet.-$$Lambda$CodeWriter$YtHhASXo0ycWnF1BeoTJEY1c0No... 
Transforming com.permissions.dispatcher.annotation.PermissionRequest... 
Transforming com.squareup.javapoet.-$$Lambda$41wj67R9eYOUlhE05A43dLwOQSw... 
Transforming com.permissions.dispatcher.processor.exception.WrongParametersException... 
Transforming com.permissions.dispatcher.ResourceTable... 
Transforming ohos.data.orm.annotation.Index... 
Transforming com.permissions.dispatcher.sample.slice.TestPermissionAbilitySlicePermissionsDispatcher$TestPermissionAbilitySlicehandlePermissionNewPermissionRequest... 
Transforming com.permissions.dispatcher.sample.slice.TestPermissionAbilitySlice... 
Transforming com.permissions.dispatcher.sample.PermissionDispatcherApp... 
Transforming com.squareup.javapoet.CodeWriter$1... 
Transforming Transforming com.squareup.javapoet.JavaFile$2... 
com.permissions.dispatcher.sample.slice.TestPermissionAbilitySlice$1... 
Transforming com.permissions.dispatcher.sample.slice.TestPermissionAbilitySlice$2... 
Transforming com.squareup.javapoet.JavaFile$1... 
Transforming com.permissions.dispatcher.processor.exception.MixPermissionTypeException... 
Transforming com.permissions.dispatcher.sample.slice.MainAbilitySlicePermissionsDispatcher... 
Soot finished on Thu Dec 09 16:58:56 CST 2021
Soot has run for 0 min. 2 sec.
next file is Haps/PermissionsDispatcher/entry_debug_signed_entry.apk
Soot started on Thu Dec 09 16:58:56 CST 2021
Using 'ohos-framework/ohos-5/framework.jar' as android.jar
Warning: java.lang.invoke.LambdaMetafactory is a phantom class!
Warning: java.lang.ref.Finalizer is a phantom class!
Warning: android.os.Bundle is a phantom class!
Warning: ohos.abilityshell.AbilityShellActivity is a phantom class!
Warning: ohos.abilityshell.HarmonyApplication is a phantom class!
Transforming com.permissions.dispatcher.sample.R... 
Transforming com.permissions.dispatcher.sample.TestPermissionAbilityShellActivity... 
Transforming com.permissions.dispatcher.sample.R$drawable... 
Transforming com.permissions.dispatcher.sample.R$string... 
Transforming com.permissions.dispatcher.sample.MainAbilityShellActivity... 
Transforming com.permissions.dispatcher.sample.ShellPermissionDispatcherApp... 
Soot finished on Thu Dec 09 16:58:56 CST 2021
Soot has run for 0 min. 0 sec.
--------------------------------------------------------------------------------------------------------
Declared Min Sdk version is: 5
Declared Target Sdk version is: 5
Declared Max Sdk version is:  at the moment there is no such one
Collected 1 OhOs APIs in the primary DEX file
Collected 302 OhOs APIs in the secondary DEX files
SDK Check:false
Found 0 Android APIs (for forward compatibility) that are accessed with protection (SDK Check)
Found 0 Android APIs (for forward compatibility) that are accessed problematically 
Found 0 Android APIs (for backward compatibility) that are accessed with protection (SDK Check)
Found 51 Android APIs (for backward compatibility) that are accessed problematically 

==>Problematic_Backward<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getSimpleName()>:[6,7]
[<com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>, <com.squareup.javapoet.ClassName: com.squareup.javapoet.ClassName get(javax.lang.model.element.TypeElement)>]
<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getSimpleName()>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>
<javax.lang.model.element.TypeElement: javax.lang.model.element.Name getSimpleName()>:[6,7]--><com.squareup.javapoet.ClassName: com.squareup.javapoet.ClassName get(javax.lang.model.element.TypeElement)>

==>Problematic_Backward<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>:[6,7]
[<com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>, <com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>, <com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder addSuperinterface(javax.lang.model.type.TypeMirror,boolean)>, <com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder superclass(javax.lang.model.type.TypeMirror,boolean)>, <com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>]
<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>
<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>:[6,7]--><com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>
<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder addSuperinterface(javax.lang.model.type.TypeMirror,boolean)>
<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder superclass(javax.lang.model.type.TypeMirror,boolean)>
<javax.lang.model.type.DeclaredType: javax.lang.model.element.Element asElement()>:[6,7]--><com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>

==>Problematic_Backward<javax.lang.model.element.Element: javax.lang.model.element.Name getSimpleName()>:[6,7]
[<com.permissions.dispatcher.processor.util.Extensions: java.lang.String simpleString(javax.lang.model.element.Element)>]
<javax.lang.model.element.Element: javax.lang.model.element.Name getSimpleName()>:[6,7]--><com.permissions.dispatcher.processor.util.Extensions: java.lang.String simpleString(javax.lang.model.element.Element)>

==>Problematic_Backward<javax.lang.model.type.TypeVariable: javax.lang.model.element.Element asElement()>:[6,7]
[<com.squareup.javapoet.TypeVariableName: com.squareup.javapoet.TypeVariableName get(javax.lang.model.type.TypeVariable)>, <com.squareup.javapoet.TypeVariableName: com.squareup.javapoet.TypeVariableName get(javax.lang.model.type.TypeVariable,java.util.Map)>]
<javax.lang.model.type.TypeVariable: javax.lang.model.element.Element asElement()>:[6,7]--><com.squareup.javapoet.TypeVariableName: com.squareup.javapoet.TypeVariableName get(javax.lang.model.type.TypeVariable)>
<javax.lang.model.type.TypeVariable: javax.lang.model.element.Element asElement()>:[6,7]--><com.squareup.javapoet.TypeVariableName: com.squareup.javapoet.TypeVariableName get(javax.lang.model.type.TypeVariable,java.util.Map)>

==>Problematic_Backward<javax.lang.model.type.DeclaredType: java.util.List getTypeArguments()>:[6,7]
[<com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>]
<javax.lang.model.type.DeclaredType: java.util.List getTypeArguments()>:[6,7]--><com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>

==>Problematic_Backward<javax.lang.model.element.Element: javax.lang.model.type.TypeMirror asType()>:[6,7]
[<com.permissions.dispatcher.processor.util.Extensions: com.permissions.dispatcher.processor.ProcessorUnit findAndValidateProcessorUnit(java.util.List,javax.lang.model.element.Element)>, <com.permissions.dispatcher.processor.util.Helpers: com.squareup.javapoet.TypeName typeNameOf(javax.lang.model.element.Element)>, <com.squareup.javapoet.CodeBlock$Builder: com.squareup.javapoet.TypeName argToType(java.lang.Object)>, <com.permissions.dispatcher.processor.util.Validators: com.permissions.dispatcher.processor.ProcessorUnit findAndValidateProcessorUnit(java.util.List,javax.lang.model.element.Element)>]
<javax.lang.model.element.Element: javax.lang.model.type.TypeMirror asType()>:[6,7]--><com.permissions.dispatcher.processor.util.Extensions: com.permissions.dispatcher.processor.ProcessorUnit findAndValidateProcessorUnit(java.util.List,javax.lang.model.element.Element)>
<javax.lang.model.element.Element: javax.lang.model.type.TypeMirror asType()>:[6,7]--><com.permissions.dispatcher.processor.util.Helpers: com.squareup.javapoet.TypeName typeNameOf(javax.lang.model.element.Element)>
<javax.lang.model.element.Element: javax.lang.model.type.TypeMirror asType()>:[6,7]--><com.squareup.javapoet.CodeBlock$Builder: com.squareup.javapoet.TypeName argToType(java.lang.Object)>
<javax.lang.model.element.Element: javax.lang.model.type.TypeMirror asType()>:[6,7]--><com.permissions.dispatcher.processor.util.Validators: com.permissions.dispatcher.processor.ProcessorUnit findAndValidateProcessorUnit(java.util.List,javax.lang.model.element.Element)>

==>Problematic_Backward<javax.lang.model.element.TypeParameterElement: java.util.List getBounds()>:[6,7]
[<com.squareup.javapoet.TypeVariableName: com.squareup.javapoet.TypeVariableName get(javax.lang.model.element.TypeParameterElement)>, <com.squareup.javapoet.TypeVariableName: com.squareup.javapoet.TypeVariableName get(javax.lang.model.type.TypeVariable,java.util.Map)>]
<javax.lang.model.element.TypeParameterElement: java.util.List getBounds()>:[6,7]--><com.squareup.javapoet.TypeVariableName: com.squareup.javapoet.TypeVariableName get(javax.lang.model.element.TypeParameterElement)>
<javax.lang.model.element.TypeParameterElement: java.util.List getBounds()>:[6,7]--><com.squareup.javapoet.TypeVariableName: com.squareup.javapoet.TypeVariableName get(javax.lang.model.type.TypeVariable,java.util.Map)>

==>Problematic_Backward<javax.lang.model.element.Element: javax.lang.model.element.Element getEnclosingElement()>:[6,7]
[<com.permissions.dispatcher.processor.util.Extensions: java.lang.String packageName(javax.lang.model.element.Element)>]
<javax.lang.model.element.Element: javax.lang.model.element.Element getEnclosingElement()>:[6,7]--><com.permissions.dispatcher.processor.util.Extensions: java.lang.String packageName(javax.lang.model.element.Element)>

==>Problematic_Backward<javax.lang.model.util.SimpleElementVisitor8: void <init>()>:[6,7]
[<com.squareup.javapoet.ClassName$1: void <init>(java.lang.String,javax.lang.model.element.TypeElement)>]
<javax.lang.model.util.SimpleElementVisitor8: void <init>()>:[6,7]--><com.squareup.javapoet.ClassName$1: void <init>(java.lang.String,javax.lang.model.element.TypeElement)>

==>Problematic_Backward<javax.lang.model.type.TypeMirror: java.lang.Object accept(javax.lang.model.type.TypeVisitor,java.lang.Object)>:[6,7]
[<com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName get(javax.lang.model.type.TypeMirror,java.util.Map)>, <com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>]
<javax.lang.model.type.TypeMirror: java.lang.Object accept(javax.lang.model.type.TypeVisitor,java.lang.Object)>:[6,7]--><com.squareup.javapoet.TypeName: com.squareup.javapoet.TypeName get(javax.lang.model.type.TypeMirror,java.util.Map)>
<javax.lang.model.type.TypeMirror: java.lang.Object accept(javax.lang.model.type.TypeVisitor,java.lang.Object)>:[6,7]--><com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>

==>Problematic_Backward<javax.lang.model.element.TypeElement: java.util.List getEnclosedElements()>:[6,7]
[<com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>]
<javax.lang.model.element.TypeElement: java.util.List getEnclosedElements()>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>

==>Problematic_Backward<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror asMemberOf(javax.lang.model.type.DeclaredType,javax.lang.model.element.Element)>:[6,7]
[<com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement,javax.lang.model.type.DeclaredType,javax.lang.model.util.Types)>]
<javax.lang.model.util.Types: javax.lang.model.type.TypeMirror asMemberOf(javax.lang.model.type.DeclaredType,javax.lang.model.element.Element)>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement,javax.lang.model.type.DeclaredType,javax.lang.model.util.Types)>

==>Problematic_Backward<javax.lang.model.SourceVersion: javax.lang.model.SourceVersion latestSupported()>:[6,7]
[<com.permissions.dispatcher.processor.PermissionsProcessor: javax.lang.model.SourceVersion getSupportedSourceVersion()>]
<javax.lang.model.SourceVersion: javax.lang.model.SourceVersion latestSupported()>:[6,7]--><com.permissions.dispatcher.processor.PermissionsProcessor: javax.lang.model.SourceVersion getSupportedSourceVersion()>

==>Problematic_Backward<javax.lang.model.SourceVersion: boolean isKeyword(java.lang.CharSequence)>:[6,7]
[<com.squareup.javapoet.NameAllocator: java.lang.String newName(java.lang.String,java.lang.Object)>]
<javax.lang.model.SourceVersion: boolean isKeyword(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.NameAllocator: java.lang.String newName(java.lang.String,java.lang.Object)>

==>Problematic_Backward<javax.lang.model.SourceVersion: boolean isIdentifier(java.lang.CharSequence)>:[6,7]
[<com.squareup.javapoet.ParameterSpec: boolean isValidParameterName(java.lang.String)>, <com.squareup.javapoet.CodeWriter: java.lang.String extractMemberName(java.lang.String)>]
<javax.lang.model.SourceVersion: boolean isIdentifier(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.ParameterSpec: boolean isValidParameterName(java.lang.String)>
<javax.lang.model.SourceVersion: boolean isIdentifier(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.CodeWriter: java.lang.String extractMemberName(java.lang.String)>

==>Problematic_Backward<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Name getSimpleName()>:[6,7]
[<com.permissions.dispatcher.processor.util.Validators: void checkDuplicatedMethodName(java.util.List)>, <com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>, <com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>]
<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Name getSimpleName()>:[6,7]--><com.permissions.dispatcher.processor.util.Validators: void checkDuplicatedMethodName(java.util.List)>
<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Name getSimpleName()>:[6,7]--><com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>
<javax.lang.model.element.ExecutableElement: javax.lang.model.element.Name getSimpleName()>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>

==>Problematic_Backward<javax.lang.model.type.WildcardType: javax.lang.model.type.TypeMirror getSuperBound()>:[6,7]
[<com.squareup.javapoet.WildcardTypeName: com.squareup.javapoet.TypeName get(javax.lang.model.type.WildcardType,java.util.Map)>]
<javax.lang.model.type.WildcardType: javax.lang.model.type.TypeMirror getSuperBound()>:[6,7]--><com.squareup.javapoet.WildcardTypeName: com.squareup.javapoet.TypeName get(javax.lang.model.type.WildcardType,java.util.Map)>

==>Problematic_Backward<javax.lang.model.element.AnnotationMirror: javax.lang.model.type.DeclaredType getAnnotationType()>:[6,7]
[<com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>]
<javax.lang.model.element.AnnotationMirror: javax.lang.model.type.DeclaredType getAnnotationType()>:[6,7]--><com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>

==>Problematic_Backward<javax.lang.model.element.ExecutableElement: boolean isVarArgs()>:[6,7]
[<com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>]
<javax.lang.model.element.ExecutableElement: boolean isVarArgs()>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>

==>Problematic_Backward<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>:[6,7]
[<com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement,javax.lang.model.type.DeclaredType,javax.lang.model.util.Types)>]
<javax.lang.model.type.ExecutableType: java.util.List getParameterTypes()>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement,javax.lang.model.type.DeclaredType,javax.lang.model.util.Types)>

==>Problematic_Backward<javax.lang.model.element.VariableElement: javax.lang.model.element.Name getSimpleName()>:[6,7]
[<com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: void addWithPermissionCheckBody(com.squareup.javapoet.MethodSpec$Builder,javax.lang.model.element.ExecutableElement,com.permissions.dispatcher.processor.RuntimePermissionsElement,java.lang.String)>, <com.squareup.javapoet.AnnotationSpec$Visitor: com.squareup.javapoet.AnnotationSpec$Builder visitEnumConstant(javax.lang.model.element.VariableElement,java.lang.String)>, <com.squareup.javapoet.ParameterSpec: com.squareup.javapoet.ParameterSpec get(javax.lang.model.element.VariableElement)>]
<javax.lang.model.element.VariableElement: javax.lang.model.element.Name getSimpleName()>:[6,7]--><com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: void addWithPermissionCheckBody(com.squareup.javapoet.MethodSpec$Builder,javax.lang.model.element.ExecutableElement,com.permissions.dispatcher.processor.RuntimePermissionsElement,java.lang.String)>
<javax.lang.model.element.VariableElement: javax.lang.model.element.Name getSimpleName()>:[6,7]--><com.squareup.javapoet.AnnotationSpec$Visitor: com.squareup.javapoet.AnnotationSpec$Builder visitEnumConstant(javax.lang.model.element.VariableElement,java.lang.String)>
<javax.lang.model.element.VariableElement: javax.lang.model.element.Name getSimpleName()>:[6,7]--><com.squareup.javapoet.ParameterSpec: com.squareup.javapoet.ParameterSpec get(javax.lang.model.element.VariableElement)>

==>Problematic_Backward<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>:[6,7]
[<com.permissions.dispatcher.processor.util.Validators: void checkMethodSignature(java.util.List)>, <com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>]
<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>:[6,7]--><com.permissions.dispatcher.processor.util.Validators: void checkMethodSignature(java.util.List)>
<javax.lang.model.type.TypeMirror: javax.lang.model.type.TypeKind getKind()>:[6,7]--><com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>

==>Problematic_Backward<javax.lang.model.type.ExecutableType: javax.lang.model.type.TypeMirror getReturnType()>:[6,7]
[<com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement,javax.lang.model.type.DeclaredType,javax.lang.model.util.Types)>]
<javax.lang.model.type.ExecutableType: javax.lang.model.type.TypeMirror getReturnType()>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement,javax.lang.model.type.DeclaredType,javax.lang.model.util.Types)>

==>Problematic_Backward<javax.lang.model.element.TypeElement: java.util.List getTypeParameters()>:[6,7]
[<com.permissions.dispatcher.processor.RuntimePermissionsElement: void <init>(javax.lang.model.element.TypeElement)>]
<javax.lang.model.element.TypeElement: java.util.List getTypeParameters()>:[6,7]--><com.permissions.dispatcher.processor.RuntimePermissionsElement: void <init>(javax.lang.model.element.TypeElement)>

==>Problematic_Backward<javax.lang.model.element.PackageElement: javax.lang.model.element.Name getQualifiedName()>:[6,7]
[<com.permissions.dispatcher.processor.util.Extensions: java.lang.String packageName(javax.lang.model.element.Element)>, <com.squareup.javapoet.ClassName$1: com.squareup.javapoet.ClassName visitPackage(javax.lang.model.element.PackageElement,java.lang.Void)>]
<javax.lang.model.element.PackageElement: javax.lang.model.element.Name getQualifiedName()>:[6,7]--><com.permissions.dispatcher.processor.util.Extensions: java.lang.String packageName(javax.lang.model.element.Element)>
<javax.lang.model.element.PackageElement: javax.lang.model.element.Name getQualifiedName()>:[6,7]--><com.squareup.javapoet.ClassName$1: com.squareup.javapoet.ClassName visitPackage(javax.lang.model.element.PackageElement,java.lang.Void)>

==>Problematic_Backward<javax.lang.model.element.TypeElement: java.util.List getInterfaces()>:[6,7]
[<com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>]
<javax.lang.model.element.TypeElement: java.util.List getInterfaces()>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>

==>Problematic_Backward<javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind[] values()>:[6,7]
[<com.squareup.javapoet.TypeName$2: void <clinit>()>]
<javax.lang.model.type.TypeKind: javax.lang.model.type.TypeKind[] values()>:[6,7]--><com.squareup.javapoet.TypeName$2: void <clinit>()>

==>Problematic_Backward<javax.tools.SimpleJavaFileObject: void <init>(java.net.URI,javax.tools.JavaFileObject.Kind)>:[6,7]
[<com.squareup.javapoet.JavaFile$2: void <init>(com.squareup.javapoet.JavaFile,java.net.URI,javax.tools.JavaFileObject$Kind)>]
<javax.tools.SimpleJavaFileObject: void <init>(java.net.URI,javax.tools.JavaFileObject.Kind)>:[6,7]--><com.squareup.javapoet.JavaFile$2: void <init>(com.squareup.javapoet.JavaFile,java.net.URI,javax.tools.JavaFileObject$Kind)>

==>Problematic_Backward<javax.lang.model.util.ElementFilter: java.util.List typesIn(java.lang.Iterable)>:[6,7]
[<com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>]
<javax.lang.model.util.ElementFilter: java.util.List typesIn(java.lang.Iterable)>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>

==>Problematic_Backward<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]
[<com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: void addResultCaseBody(com.squareup.javapoet.MethodSpec$Builder,javax.lang.model.element.ExecutableElement,com.permissions.dispatcher.processor.RuntimePermissionsElement,java.lang.String,java.lang.String)>, <com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: void addWithPermissionCheckBody(com.squareup.javapoet.MethodSpec$Builder,javax.lang.model.element.ExecutableElement,com.permissions.dispatcher.processor.RuntimePermissionsElement,java.lang.String)>, <com.permissions.dispatcher.processor.util.Validators: void checkMethodParameters(java.util.List,int,javax.lang.model.type.TypeMirror)>, <com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: com.squareup.javapoet.MethodSpec createWithPermissionCheckMethod(com.permissions.dispatcher.processor.RuntimePermissionsElement,javax.lang.model.element.ExecutableElement)>, <com.squareup.javapoet.ParameterSpec: java.util.List parametersOf(javax.lang.model.element.ExecutableElement)>, <com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: java.util.List createOnShowRationaleCallbackMethods(com.permissions.dispatcher.processor.RuntimePermissionsElement)>, <com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: com.squareup.javapoet.TypeSpec createPermissionRequestClass(com.permissions.dispatcher.processor.RuntimePermissionsElement,javax.lang.model.element.ExecutableElement)>, <com.permissions.dispatcher.processor.util.Helpers: com.squareup.javapoet.CodeBlock varargsParametersCodeBlock(javax.lang.model.element.ExecutableElement,boolean)>, <com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: java.util.List createFields(com.permissions.dispatcher.processor.RuntimePermissionsElement,com.permissions.dispatcher.processor.RequestCodeProvider)>, <com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: java.util.List createPermissionRequestClasses(com.permissions.dispatcher.processor.RuntimePermissionsElement)>, <com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: java.util.List createArgFields(javax.lang.model.element.ExecutableElement)>]
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: void addResultCaseBody(com.squareup.javapoet.MethodSpec$Builder,javax.lang.model.element.ExecutableElement,com.permissions.dispatcher.processor.RuntimePermissionsElement,java.lang.String,java.lang.String)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: void addWithPermissionCheckBody(com.squareup.javapoet.MethodSpec$Builder,javax.lang.model.element.ExecutableElement,com.permissions.dispatcher.processor.RuntimePermissionsElement,java.lang.String)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.util.Validators: void checkMethodParameters(java.util.List,int,javax.lang.model.type.TypeMirror)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: com.squareup.javapoet.MethodSpec createWithPermissionCheckMethod(com.permissions.dispatcher.processor.RuntimePermissionsElement,javax.lang.model.element.ExecutableElement)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.squareup.javapoet.ParameterSpec: java.util.List parametersOf(javax.lang.model.element.ExecutableElement)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: java.util.List createOnShowRationaleCallbackMethods(com.permissions.dispatcher.processor.RuntimePermissionsElement)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: com.squareup.javapoet.TypeSpec createPermissionRequestClass(com.permissions.dispatcher.processor.RuntimePermissionsElement,javax.lang.model.element.ExecutableElement)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.util.Helpers: com.squareup.javapoet.CodeBlock varargsParametersCodeBlock(javax.lang.model.element.ExecutableElement,boolean)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: java.util.List createFields(com.permissions.dispatcher.processor.RuntimePermissionsElement,com.permissions.dispatcher.processor.RequestCodeProvider)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: java.util.List createPermissionRequestClasses(com.permissions.dispatcher.processor.RuntimePermissionsElement)>
<javax.lang.model.element.ExecutableElement: java.util.List getParameters()>:[6,7]--><com.permissions.dispatcher.processor.impl.JavaBaseProcessorUnit: java.util.List createArgFields(javax.lang.model.element.ExecutableElement)>

==>Problematic_Backward<javax.lang.model.element.Element: java.util.Set getModifiers()>:[6,7]
[<com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>, <com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>]
<javax.lang.model.element.Element: java.util.Set getModifiers()>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>
<javax.lang.model.element.Element: java.util.Set getModifiers()>:[6,7]--><com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>

==>Problematic_Backward<javax.lang.model.SourceVersion: boolean isName(java.lang.CharSequence)>:[6,7]
[<com.squareup.javapoet.FieldSpec: com.squareup.javapoet.FieldSpec$Builder builder(com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.element.Modifier[])>, <com.squareup.javapoet.AnnotationSpec$Builder: com.squareup.javapoet.AnnotationSpec$Builder addMemberForValue(java.lang.String,java.lang.Object)>, <com.squareup.javapoet.TypeSpec$Builder: void <init>(com.squareup.javapoet.TypeSpec$Kind,java.lang.String,com.squareup.javapoet.CodeBlock)>, <com.squareup.javapoet.MethodSpec$Builder: com.squareup.javapoet.MethodSpec$Builder setName(java.lang.String)>, <com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec build()>, <com.squareup.javapoet.AnnotationSpec$Builder: com.squareup.javapoet.AnnotationSpec build()>, <com.squareup.javapoet.ParameterSpec: boolean isValidParameterName(java.lang.String)>]
<javax.lang.model.SourceVersion: boolean isName(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.FieldSpec: com.squareup.javapoet.FieldSpec$Builder builder(com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.element.Modifier[])>
<javax.lang.model.SourceVersion: boolean isName(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.AnnotationSpec$Builder: com.squareup.javapoet.AnnotationSpec$Builder addMemberForValue(java.lang.String,java.lang.Object)>
<javax.lang.model.SourceVersion: boolean isName(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: void <init>(com.squareup.javapoet.TypeSpec$Kind,java.lang.String,com.squareup.javapoet.CodeBlock)>
<javax.lang.model.SourceVersion: boolean isName(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.MethodSpec$Builder: com.squareup.javapoet.MethodSpec$Builder setName(java.lang.String)>
<javax.lang.model.SourceVersion: boolean isName(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec build()>
<javax.lang.model.SourceVersion: boolean isName(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.AnnotationSpec$Builder: com.squareup.javapoet.AnnotationSpec build()>
<javax.lang.model.SourceVersion: boolean isName(java.lang.CharSequence)>:[6,7]--><com.squareup.javapoet.ParameterSpec: boolean isValidParameterName(java.lang.String)>

==>Problematic_Backward<javax.lang.model.element.AnnotationValue: java.lang.Object accept(javax.lang.model.element.AnnotationValueVisitor,java.lang.Object)>:[6,7]
[<com.squareup.javapoet.AnnotationSpec$Visitor: com.squareup.javapoet.AnnotationSpec$Builder visitArray(java.util.List,java.lang.String)>, <com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>]
<javax.lang.model.element.AnnotationValue: java.lang.Object accept(javax.lang.model.element.AnnotationValueVisitor,java.lang.Object)>:[6,7]--><com.squareup.javapoet.AnnotationSpec$Visitor: com.squareup.javapoet.AnnotationSpec$Builder visitArray(java.util.List,java.lang.String)>
<javax.lang.model.element.AnnotationValue: java.lang.Object accept(javax.lang.model.element.AnnotationValueVisitor,java.lang.Object)>:[6,7]--><com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>

==>Problematic_Backward<javax.lang.model.type.WildcardType: javax.lang.model.type.TypeMirror getExtendsBound()>:[6,7]
[<com.squareup.javapoet.WildcardTypeName: com.squareup.javapoet.TypeName get(javax.lang.model.type.WildcardType,java.util.Map)>]
<javax.lang.model.type.WildcardType: javax.lang.model.type.TypeMirror getExtendsBound()>:[6,7]--><com.squareup.javapoet.WildcardTypeName: com.squareup.javapoet.TypeName get(javax.lang.model.type.WildcardType,java.util.Map)>

==>Problematic_Backward<javax.lang.model.util.SimpleAnnotationValueVisitor8: void <init>(java.lang.Object)>:[6,7]
[<com.squareup.javapoet.AnnotationSpec$Visitor: void <init>(com.squareup.javapoet.AnnotationSpec$Builder)>]
<javax.lang.model.util.SimpleAnnotationValueVisitor8: void <init>(java.lang.Object)>:[6,7]--><com.squareup.javapoet.AnnotationSpec$Visitor: void <init>(com.squareup.javapoet.AnnotationSpec$Builder)>

==>Problematic_Backward<javax.lang.model.element.AnnotationMirror: java.util.Map getElementValues()>:[6,7]
[<com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>]
<javax.lang.model.element.AnnotationMirror: java.util.Map getElementValues()>:[6,7]--><com.squareup.javapoet.AnnotationSpec: com.squareup.javapoet.AnnotationSpec get(javax.lang.model.element.AnnotationMirror)>

==>Problematic_Backward<javax.lang.model.util.SimpleTypeVisitor8: void <init>()>:[6,7]
[<com.squareup.javapoet.TypeName$1: void <init>(java.util.Map)>]
<javax.lang.model.util.SimpleTypeVisitor8: void <init>()>:[6,7]--><com.squareup.javapoet.TypeName$1: void <init>(java.util.Map)>

==>Problematic_Backward<javax.lang.model.util.Types: boolean isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>:[6,7]
[<com.permissions.dispatcher.processor.util.Validators: void checkMethodParameters(java.util.List,int,javax.lang.model.type.TypeMirror)>]
<javax.lang.model.util.Types: boolean isSameType(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>:[6,7]--><com.permissions.dispatcher.processor.util.Validators: void checkMethodParameters(java.util.List,int,javax.lang.model.type.TypeMirror)>

==>Problematic_Backward<javax.lang.model.element.ExecutableElement: java.util.List getTypeParameters()>:[6,7]
[<com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>]
<javax.lang.model.element.ExecutableElement: java.util.List getTypeParameters()>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>

==>Problematic_Backward<javax.lang.model.element.ExecutableElement: java.util.List getThrownTypes()>:[6,7]
[<com.permissions.dispatcher.processor.util.Validators: void checkMethodSignature(java.util.List)>, <com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>]
<javax.lang.model.element.ExecutableElement: java.util.List getThrownTypes()>:[6,7]--><com.permissions.dispatcher.processor.util.Validators: void checkMethodSignature(java.util.List)>
<javax.lang.model.element.ExecutableElement: java.util.List getThrownTypes()>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>

==>Problematic_Backward<javax.lang.model.type.TypeMirror: java.lang.String toString()>:[6,7]
[<com.permissions.dispatcher.processor.exception.WrongReturnTypeException: void <init>(javax.lang.model.element.ExecutableElement)>, <com.permissions.dispatcher.processor.util.Extensions: java.lang.String simpleString(javax.lang.model.type.TypeMirror)>]
<javax.lang.model.type.TypeMirror: java.lang.String toString()>:[6,7]--><com.permissions.dispatcher.processor.exception.WrongReturnTypeException: void <init>(javax.lang.model.element.ExecutableElement)>
<javax.lang.model.type.TypeMirror: java.lang.String toString()>:[6,7]--><com.permissions.dispatcher.processor.util.Extensions: java.lang.String simpleString(javax.lang.model.type.TypeMirror)>

==>Problematic_Backward<javax.lang.model.util.Types: boolean isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>:[6,7]
[<com.permissions.dispatcher.processor.util.Extensions: boolean isSubtypeOf(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>, <com.permissions.dispatcher.processor.util.Validators: boolean isSubtypeOf(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>]
<javax.lang.model.util.Types: boolean isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>:[6,7]--><com.permissions.dispatcher.processor.util.Extensions: boolean isSubtypeOf(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>
<javax.lang.model.util.Types: boolean isSubtype(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>:[6,7]--><com.permissions.dispatcher.processor.util.Validators: boolean isSubtypeOf(javax.lang.model.type.TypeMirror,javax.lang.model.type.TypeMirror)>

==>Problematic_Backward<javax.lang.model.element.Element: java.lang.Object accept(javax.lang.model.element.ElementVisitor,java.lang.Object)>:[6,7]
[<com.squareup.javapoet.ClassName: com.squareup.javapoet.ClassName get(javax.lang.model.element.TypeElement)>]
<javax.lang.model.element.Element: java.lang.Object accept(javax.lang.model.element.ElementVisitor,java.lang.Object)>:[6,7]--><com.squareup.javapoet.ClassName: com.squareup.javapoet.ClassName get(javax.lang.model.element.TypeElement)>

==>Problematic_Backward<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>:[6,7]
[<com.permissions.dispatcher.processor.exception.WrongReturnTypeException: void <init>(javax.lang.model.element.ExecutableElement)>, <com.permissions.dispatcher.processor.util.Validators: void checkMethodSignature(java.util.List)>, <com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>]
<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>:[6,7]--><com.permissions.dispatcher.processor.exception.WrongReturnTypeException: void <init>(javax.lang.model.element.ExecutableElement)>
<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>:[6,7]--><com.permissions.dispatcher.processor.util.Validators: void checkMethodSignature(java.util.List)>
<javax.lang.model.element.ExecutableElement: javax.lang.model.type.TypeMirror getReturnType()>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement)>

==>Problematic_Backward<javax.lang.model.util.Elements: javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence)>:[6,7]
[<com.permissions.dispatcher.processor.util.Helpers: javax.lang.model.type.TypeMirror typeMirrorOf(java.lang.String)>]
<javax.lang.model.util.Elements: javax.lang.model.element.TypeElement getTypeElement(java.lang.CharSequence)>:[6,7]--><com.permissions.dispatcher.processor.util.Helpers: javax.lang.model.type.TypeMirror typeMirrorOf(java.lang.String)>

==>Problematic_Backward<javax.lang.model.element.TypeElement: javax.lang.model.type.TypeMirror getSuperclass()>:[6,7]
[<com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>]
<javax.lang.model.element.TypeElement: javax.lang.model.type.TypeMirror getSuperclass()>:[6,7]--><com.squareup.javapoet.TypeSpec$Builder: com.squareup.javapoet.TypeSpec$Builder avoidClashesWithNestedClasses(javax.lang.model.element.TypeElement)>

==>Problematic_Backward<javax.lang.model.element.TypeElement: javax.lang.model.element.Element getEnclosingElement()>:[6,7]
[<com.squareup.javapoet.ClassName: com.squareup.javapoet.ClassName get(javax.lang.model.element.TypeElement)>]
<javax.lang.model.element.TypeElement: javax.lang.model.element.Element getEnclosingElement()>:[6,7]--><com.squareup.javapoet.ClassName: com.squareup.javapoet.ClassName get(javax.lang.model.element.TypeElement)>

==>Problematic_Backward<javax.lang.model.type.ArrayType: javax.lang.model.type.TypeMirror getComponentType()>:[6,7]
[<com.squareup.javapoet.ArrayTypeName: com.squareup.javapoet.ArrayTypeName get(javax.lang.model.type.ArrayType,java.util.Map)>]
<javax.lang.model.type.ArrayType: javax.lang.model.type.TypeMirror getComponentType()>:[6,7]--><com.squareup.javapoet.ArrayTypeName: com.squareup.javapoet.ArrayTypeName get(javax.lang.model.type.ArrayType,java.util.Map)>

==>Problematic_Backward<javax.lang.model.element.Element: java.util.List getEnclosedElements()>:[6,7]
[<com.permissions.dispatcher.processor.util.Extensions: java.util.List childElementsAnnotatedWith(javax.lang.model.element.Element,java.lang.Class)>]
<javax.lang.model.element.Element: java.util.List getEnclosedElements()>:[6,7]--><com.permissions.dispatcher.processor.util.Extensions: java.util.List childElementsAnnotatedWith(javax.lang.model.element.Element,java.lang.Class)>

==>Problematic_Backward<javax.lang.model.type.ExecutableType: java.util.List getThrownTypes()>:[6,7]
[<com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement,javax.lang.model.type.DeclaredType,javax.lang.model.util.Types)>]
<javax.lang.model.type.ExecutableType: java.util.List getThrownTypes()>:[6,7]--><com.squareup.javapoet.MethodSpec: com.squareup.javapoet.MethodSpec$Builder overriding(javax.lang.model.element.ExecutableElement,javax.lang.model.type.DeclaredType,javax.lang.model.util.Types)>

==>Problematic_Backward<javax.lang.model.type.DeclaredType: javax.lang.model.type.TypeMirror getEnclosingType()>:[6,7]
[<com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>]
<javax.lang.model.type.DeclaredType: javax.lang.model.type.TypeMirror getEnclosingType()>:[6,7]--><com.squareup.javapoet.TypeName$1: com.squareup.javapoet.TypeName visitDeclared(javax.lang.model.type.DeclaredType,java.lang.Void)>
